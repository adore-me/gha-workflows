name: 'Reusable Cypress workflow for front-end apps'

on:
  workflow_call:
    secrets:
      CYPRESS_CURRENTS_RECORD_KEY:
        required: true
      NPM_TOKEN:
        required: true
      GITHUB_TOKEN:
        required: true

jobs:
  cypress-run:
    name: Cypress Tests
    runs-on: ubuntu-22.04
    steps:
      - name: Setup xvfb (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo DEBIAN_FRONTEND=noninteractive apt-get update
          sudo DEBIAN_FRONTEND=noninteractive apt-get -y install libgtk2.0-0 libgtk-3-0 libgbm-dev libnotify-dev libgconf-2-4 libnss3 libxss1 libasound2 libxtst6 xauth xvfb

      - name: Checkout
        uses: actions/checkout@v3.5.2
        with:
          persist-credentials: false

      - name: Read Config
        uses: actions-tools/yaml-outputs@v2
        id: config
        with:
          file-path: ci/config.yaml
          separator: '-'

      - name: Config Info
        run: |
          # Colors
          BL='\033[0;34m'
          NC='\033[0m'
          echo -e "${BL}Info:${NC} nodeVersion: ${{ steps.config.outputs.nodeVersion }}"
          echo -e "${BL}Info:${NC} useRootDotEnv: ${{ steps.config.outputs.useRootDotEnv }}"
          echo -e "${BL}Info:${NC} runTests: ${{ steps.config.outputs.runTests }}"
          echo -e "${BL}Info:${NC} cypressPort: ${{ steps.config.outputs.cypressPort }}"

      - name: Node setup
        uses: actions/setup-node@v3.6.0
        with:
          node-version: ${{ steps.config.outputs.nodeVersion }}
          cache: npm

      - name: Provision app config
        id: provision-app-config
        run: |
          echo "useRootDotEnv: ${{ steps.config.outputs.useRootDotEnv }}"
          if [ "${{ steps.config.outputs.useRootDotEnv }}" = "false" ]; then
            cp ./src/env/env.dev.template ./src/env/env.ts

            sed -i -e 's|APP_ENV|false|g' ./src/env/env.ts
            sed -i -e 's|NAMESPACE|ci|g' ./src/env/env.ts
          else
            cp .env.template .env

            sed -i -e 's|{NAMESPACE}|ci|g' .env
            sed -i -e 's|{PROTOCOL}|http|g' .env
            sed -i -e 's|{ENV}|ci|g' .env
          fi

      # Install NPM dependencies, cache them correctly
      # and run all Cypress tests
      - name: Cypress run
        id: cypress-run
        uses: cypress-io/github-action@v5.8.3
        with:
          install: true
          build: npm run build:ci
          start: npm run start
          wait-on: "http://127.0.0.1:${{ steps.config.outputs.cypress-port }}"
          wait-on-timeout: 120
          command: npx ${{ steps.config.outputs.cypress-currentsLib }} ${{ steps.config.outputs.cypress-flags }} --key ${{ secrets.CYPRESS_CURRENTS_RECORD_KEY }} --ci-build-id ${{ github.repository }}-${{ github.run_id }}-${{ github.run_attempt}}
          ci-build-id: ${{ github.repository }}-${{ github.run_id }}-${{ github.run_attempt}}
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_CURRENTS_RECORD_KEY }}
          DEBUG: '@cypress/github-action'

      - name: Upload screenshots
        uses: actions/upload-artifact@v3.1.2
        if: failure()
        with:
          name: cypress-screenshots
          path: cypress/screenshots
          if-no-files-found: warn # 'warn' or 'error' are also available, defaults to `warn`

      - name: Results comment
        if: always()
        uses: actions/github-script@v6.4.1
        with:
          script: |
            const testResultsObject = '${{ steps.cypress-run.outputs.testResultsObject }}'
            if (testResultsObject == '') {
              console.log('No test results found')
              return
            }

            const testResults = JSON.parse(testResultsObject)
            const status = testResults.status ? 'ðŸ‘‹ Cypress tests OK!' : 'ðŸ”¥ðŸ”¥ðŸ”¥ Cypress tests failed ðŸ”¥ðŸ”¥ðŸ”¥'
            let summary = '<table>'
            sumary += '<tr><th>Result</th><th>Passed :white_check_mark:</th><th>Failed :x:</th><th>Pending :hand:</th><th>Skipped :leftwards_arrow_with_hook:</th><th>Duration :clock8:</th></tr>'
            summary += '<tr>'
            summary += '<td>' + (testResults.status ? 'Success :white_check_mark:' : 'Failing :red_circle:') + '</td>'
            summary += '<td>' + testResults.totalPassed + '</td>'
            summary += '<td>' + testResults.totalFailed + '</td>'
            summary += '<td>' + testResults.totalPending + '</td>'
            summary += '<td>' + testResults.totalSkipped + '</td>'
            summary += '<td>' + testResults.totalDuration + 's</td>'
            summary += '</tr>'
            summary += '</table>'
            const body = status + '\n' + summary

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            })
