name: 'Deploy app to QA environments'

on:
  workflow_call:
    inputs:
      namespace:
        description: 'namespace:'
        type: string
        required: true
        default: ''
      identifier:
        description: 'mass-deploy-identifier: '
        type: string
        required: false
    secrets:
      GH_KEY:
        required: true
      APP_ID:
        required: true
      QUAY_USER:
        required: true
      QUAY_PASSWORD:
        required: true

concurrency:
  group: ${{ inputs.namespace }}
run-name: ${{ github.event_name == 'workflow_dispatch' && tojson(inputs) }}
jobs:
  reusable:
    timeout-minutes: 10
    runs-on: ubuntu-latest
    steps:
      - name: 'Create token'
        id: gha-token
        uses: actions/create-github-app-token@v1.9.0
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.GH_KEY }}
          owner: ${{ github.repository_owner }}

      - name: 'Checkout kube-dev'
        uses: actions/checkout@v4.1.1
        with:
          repository: adore-me/kube-dev
          token: ${{ steps.gha-token.outputs.token }}
          ref: main

      - name: 'Checkout ${{ github.event.repository.name }}'
        uses: actions/checkout@v4.1.1
        with:
          repository: adore-me/${{ github.event.repository.name }}
          token: ${{ steps.gha-token.outputs.token }}
          submodules: true
          path: ${{ github.event.repository.name }}
          ref: ${{ github.ref }}

      - name: 'Set tag'
        id: set-tag
        run: |
          printf -v tag  "dev-%s-%s-%s"  "$(date +'%m%d%Y')" "$(git rev-parse --short HEAD)" "$(git rev-list --count HEAD)"
          echo tag=$tag >> $GITHUB_ENV

      - name: 'Set up Docker Buildx'
        uses: docker/setup-buildx-action@v3.3.0

      - name: 'Login to Quay'
        uses: docker/login-action@v2.2.0
        with:
          username: ${{ secrets.QUAY_USER }}
          password: ${{ secrets.QUAY_PASSWORD }}
          registry: quay.io

      - name: 'Build and push'
        uses: docker/build-push-action@v5.4.0
        with:
          build-args: |
            target=staging
          context: ./${{ github.event.repository.name }}
          push: true
          tags: 'quay.io/adoreme/${{ github.event.repository.name }}:${{ env.tag }}'

      - name: 'Remove ${{ github.event.repository.name }} repo'
        run: |
          rm -rf ${{ github.event.repository.name }}

      - name: 'Copy helm-release.yaml to teams folder'
        id: copy-helm-release
        run: |
          team_namespace=${{ inputs.namespace }}
          path="apps/namespaces/${{ inputs.namespace }}/releases/${{ github.event.repository.name }}"
          basePath="resources/base/apps/${{ github.event.repository.name }}"
          mkdir -p $path
          echo "Created folder $path"
          cp $basePath/helm-release.yaml $path/helm-release.yaml
          echo "Copied helm-release.yaml"
          if [ -d $basePath/sealed-secrets ]; then
            cp -r $basePath/sealed-secrets $path
            echo "Copied sealed-secrets folder"
          fi

      - name: 'Replace values in helm-release.yaml'
        id: replace-values
        run: |
          team_namespace=${{ inputs.namespace }}
          domain="${{ github.event.repository.name }}-${{ inputs.namespace }}.dev.adoreme.com"
          tag="${{ env.tag }}"
          path="apps/namespaces/${{ inputs.namespace }}/releases/${{ github.event.repository.name }}"
          filePath="apps/namespaces/${{ inputs.namespace }}/releases/${{ github.event.repository.name }}/helm-release.yaml"
          sed -i "s/NAMESPACE\b/$team_namespace/1" "$filePath"
          echo "Replaced namespace with $team_namespace in helm-release.yaml"
          sed -i "s/DOMAIN\b/$domain/1" "$filePath"
          echo "Replaced domain with $domain in helm-release.yaml"
          sed -i "s#TAG\b#$tag#1" "$filePath"
          echo "Replaced tag with $tag in helm-release.yaml"
          secretPath="apps/namespaces/${{ inputs.namespace }}/releases/${{ github.event.repository.name }}/sealed-secrets"
          find "$secretPath" -type f -name "*.yaml" -print0 | while IFS= read -r -d $'\0' file; do
            sed -i "s/namespace: TARGET_NAMESPACE\b/namespace: $team_namespace/1" "$file"
            echo "Replaced namespace with $team_namespace in $file"
          done

      - name: 'Pull-request to kube-dev'
        run: |
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

          status=$(git status --porcelain)
          if [ -z "$status" ]; then
            # If the status is empty, there is nothing to commit
            echo "Nothing to commit."
            exit 0
          fi
          
          branch="deploy-${{ inputs.namespace }}-${{ github.event.repository.name }}-$(date +'%Y%m%d%H%M%S')"
          git checkout -b $branch
          git add apps/namespaces/*
          git commit --all -m "Deploy ${{ github.event.repository.name }} in ${{ inputs.namespace }} with tag $tag"
          git push --set-upstream origin $branch
          
          gh pr create --base main \
            --title "Deploy ${{ github.event.repository.name }} with $tag on ${{ inputs.namespace }}" \
            --body 'PR triggered by repository: [${{ github.event.repository.name }}](https://github.com/adore-me/${{ github.event.repository.name }}/blob/${{ github.ref }}/.github/workflows/deploy-app-to-dev-ns.yaml) <br>Workflow run: [deploy-app-to-dev-ns.yaml](https://github.com/adore-me/${{ github.event.repository.name }}/actions/runs/${{ github.run_id }})'
          
          gh pr merge --rebase
        env:
          GH_TOKEN: ${{ steps.gha-token.outputs.token }}
