name: 'Reusable CI workflow for go apps'

on:
  workflow_call:
    inputs:
      run-tests:
        description: 'Run tests'
        required: false
        type: boolean
        default: false
      enable-mysql:
        description: 'Enable MySql for tests'
        required: false
        type: boolean
        default: false
      database:
        description: 'Database name'
        required: false
        type: string
        default: ''
      app-port:
        description: 'Application port'
        required: false
        type: string
        default: ''
      database-port:
        description: 'Database port'
        required: false
        type: string
        default: ''
      run-migrations:
        description: 'Run migrations'
        required: false
        type: boolean
        default: false
      run-seeder:
        description: 'Run seeder'
        required: false
        type: boolean
        default: false
    secrets:
        SLACK_WEBHOOK_URL:
          required: true
        QUAY_USER:
          required: true
        QUAY_PASSWORD:
          required: true

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout ${{ github.event.repository.name }}'
        uses: actions/checkout@v4

      - name: 'Setup go'
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: 'Install dependencies and run build'
        run: |
          go version
          go mod tidy
          go build .

      - name: 'Run vet'
        run: |
          go vet .

      - if: inputs.enable-mysql == true
        name: 'Test database setup'
        run: |
          sudo systemctl start mysql.service
          mysql -uroot -proot -e "CREATE DATABASE ${{ inputs.database }};"
          if ${{ inputs.app-port }} != "" ; then
            printf "app:\n  port: ${{ inputs.app-port }}\ndb:\n  host: localhost\n  port: ${{ inputs.database-port }}\n  user: root\n  password: root\n  schema: ${{ inputs.database }}" > config.testing.yaml
          else
            printf "db:\n  host: localhost\n  port: ${{ inputs.database-port }}\n  user: root\n  password: root\n  schema: ${{ inputs.database }}" > config.testing.yaml
          fi

      - if: inputs.run-migrations == true
        name: 'Run migrations'
        run: go run main.go migrate up --config=config.testing.yaml

      - if: inputs.run-seeder == true
        name: 'Run seeder'
        run: go run main.go seed seed --config=config.testing.yaml

      - name: 'Send slack notification'
        uses: 8398a7/action-slack@v3
        with:
          job_name: Test
          status: ${{ job.status }}
          fields: message,commit,author,action,eventName,ref,workflow,job,took
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: always()

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - name: 'Checkout ${{ github.repository }}'
        uses: actions/checkout@v4

      - name: 'Set-tag'
        id: set-tag
        run: |
          printf -v tag  "prod-%s-%s-%s"  "$(date +'%m%d%Y')" "$(git rev-parse --short HEAD)" "$(git rev-list --count HEAD)"
          echo tag=$tag >> $GITHUB_ENV

      - name: 'Set up Docker Buildx'
        uses: docker/setup-buildx-action@v3.3.0

      - name: 'Login to Quay'
        uses: docker/login-action@v3.0.0
        with:
          username: ${{ secrets.QUAY_USER }}
          password: ${{ secrets.QUAY_PASSWORD }}
          registry: quay.io

      - name: 'Build and push'
        uses: docker/build-push-action@v5.4.0
        with:
          context: .
          push: true
          tags: 'quay.io/adoreme/${{ github.event.repository.name }}:${{ env.tag }}'
