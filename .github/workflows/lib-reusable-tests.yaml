name: 'Reusable CI workflow for lib tests'

on:
  workflow_call:
    inputs:
      reports-dir:
        description: 'Reports base directory'
        type: string
        default: 'build/reports'
      phpunit-report-file-name:
        description: 'PHPUnit report file name'
        type: string
        default: 'phpunit-junit.xml'
      enable-mysql:
        description: 'Enable MySQL'
        type: string
        required: true
        default: 'false'
      run-migrations:
        description: 'Run migrations'
        type: string
        required: true
        default: 'true'
      run-seeds:
        description: 'Run seeds'
        type: string
        required: true
        default: 'true'
      enable-redis:
        description: 'Enable Redis'
        type: string
        required: true
        default: 'false'
      enable-workers:
        description: 'Enable Workers'
        type: string
        required: true
        default: 'false'
      workers-conf-path:
        description: 'Workers configuration file path'
        type: string
        default: 'ci/worker-confs/supervisor_dev_test_workers.conf'
      with-coverage:
        description: 'Run coverage'
        type: string
        required: true
        default: 'true'
      coverage-report-file-name:
        description: 'Coverage report file name'
        type: string
        required: true
        default: 'coverage-clover.xml'
      run-suites:
        type: string
        description: 'Run specific suites. Pass suites as a comma separated list, no spaces (e.g. "UnitTests,IntegrationTests")'
        required: false
        default: ''
      verbose:
        type: string
        description: 'Run PHPUnit in verbose mode'
        required: true
        default: 'false'
      min-line-coverage:
        description: 'Minimum percentage acceptable for line coverage'
        type: number
        default: 0
      min-method-coverage:
        description: 'Minimum percentage acceptable for method coverage'
        type: number
        default: 0
      enable-rabbitmq:
        description: 'Enable RabbitMQ'
        type: string
        required: false
        default: 'false'

permissions: write-all

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v4

      - name: 'Add env.testing.ci'
        run: |
          if [ -f .env.testing.ci ]; then
            exit 0
          else 
            echo "APP_ENV=testing" > .env.testing.ci
          fi

      - name: 'Add config.yaml'
        run: |
          if [ -f ci/config.yaml ]; then
            exit 0
          else 
            mkdir ci
            touch ci/config.yaml
            echo "image-tag: php-7.1.33-v1.0.0" > ci/config.yaml
          fi

      - name: 'Set PHP image'
        uses: adore-me/gha-image-setup@v1.1.5

      - name: 'Login quay'
        uses: docker/login-action@v2.1.0
        with:
          registry: quay.io
          username: ${{ secrets.GHA_QUAY_ROBOT_USERNAME }}
          password: ${{ secrets.GHA_QUAY_ROBOT_PASSWORD }}

      - name: 'Validate composer.json and composer.lock'
        run: composer validate --strict

      - name: 'Composer Install'
        uses: adore-me/gha-composer@v2.1.3
        with:
          cache: true
          gh-oauth-token: ${{ secrets.GH_PRIVATE_ACTIONS_TOKEN_OLD_FORMAT }}

      - name: 'Run PHPUnit'
        uses: adore-me/gha-phpunit@test
        with:
          enable-mysql: ${{ inputs.enable-mysql }}
          enable-redis: ${{ inputs.enable-redis }}
          enable-workers: ${{ inputs.enable-workers }}
          enable-rabbitmq: ${{ inputs.enable-rabbitmq }}
          run-migrations: ${{ inputs.run-migrations }}
          run-seeds: ${{ inputs.run-seeds }}
          run-suites: ${{ inputs.run-suites }}
          verbose: ${{ inputs.verbose }}
          with-coverage: ${{ inputs.with-coverage }}
